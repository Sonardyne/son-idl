{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#about","title":"About","text":""},{"location":"#what-is-the-api","title":"What is the API?","text":"<p>Sonardyne's API is designed to use off-the-shelf technologies for interfacing to Sonardyne instruments and systems. This software does not collect, process, or store any personal data.</p> <p>A typical integration will involve using a combination of:  </p> <ul> <li>Web User Interface</li> <li>API</li> <li>Input and Output messages</li> </ul> <p>Information on these pages will assist a developer or integrator by providing integration examples, suggested tooling, code examples, and all required reference documentation. </p>"},{"location":"#which-products-use-the-api","title":"Which products use the API?","text":"<p>The Sonardyne products listed below support the Sonardyne API:</p> System/Instrument Version SPRINT-Nav Mini 1.3.x Future Support <p>Future Sonardyne products will utilise a common version of this API</p> Previous versions <p>When major updates are made to the interface previous versions of this documentation can be found below.</p> System/Instrument Instrument version Last idl version SPRINT-Nav mini 1.2.x v0.9.2"},{"location":"#primary-interface-grpc-and-protobuf-vs-secondary-interface-json","title":"Primary interface (gRPC and Protobuf) vs Secondary interface (JSON)","text":"<p>The gRPC interface is in a binary format, and will use fewer bytes to send each command, which saves bandwidth and reduces processing time/latency on the instrument. The JSON interface is a layer added to the gRPC interface to allow sending and receiving of JSON string representations of Protocol Buffers. In future the gRPC interface will be expanded to include streaming data for complete command and control, this may not be enabled or possible with the JSON interface. See the Technology Explainer for more details.</p>"},{"location":"external_reference/","title":"External reference","text":""},{"location":"external_reference/#external-references","title":"External References","text":"<p>The below references are useful for development, but are in no way affiliated with Sonardyne.</p>"},{"location":"external_reference/#awesome-grpc","title":"Awesome gRPC","text":"<p>awesome-grpc is a list of resources for gRPC development.</p>"},{"location":"external_reference/#grpc-ui","title":"gRPC UI","text":"<p>gRPC UI is a command-line tool that lets you interact with gRPC servers via a browser. The resulting UI allows the user to interactively construct requests to send to a gRPC server, by presenting all of the fields in a tree view. It uses the MIT License.</p> Example use of gRPC UI <p>To perform a GetState, select \"GetState\" from the \"Method name\" dropdown and click \"Invoke\" (leaving the other fields blank). Response from the GetState: To perform a SetState, select \"SetState\" from the \"Method name\" dropdown and add the necessary fields using the tree view below. Response from the SetState: </p> <p>To install gRPC UI, go to the gRPC UI GitHub releases page and download the latest release (e.g. grpcui_1.3.1_windows_x86_64.zip). Extract the zip to a location from which you can run the executable (e.g. C:/tools/grpcui/). Open a command/terminal window in the same directory as grpcui.exe, and run the following command: <code>grpcui.exe -plaintext -import-path ./protos -proto service.proto 192.168.179.10:8000</code> Note that in this example, the <code>.proto</code> files are located in a <code>protos</code> folder at the same level as <code>grpcui.exe</code></p>"},{"location":"integration/","title":"Integration examples","text":""},{"location":"integration/#sprint-nav-mini","title":"Sprint-Nav Mini","text":"<p>SPRINT-Nav Mini is designed to be easily integrated into multiple classes of vehicle/vessel. All available inputs and outputs, as well as detailed integration documents, are described in the product manual and the manual should be considered the reference for the use of these systems. This section provides a broad overview of how the API alongside other messages can be used with a SPRINT-Nav mini.</p>"},{"location":"integration/#physical-installation","title":"Physical installation","text":"<p>SPRINT-Nav Mini can be installed at any convenient location where the DVL has an unobstructed view of the seabed. However, to gain optimal performance there are some guidelines. </p> <p>CAD .stp files are available on Sonardyne's knowledge base</p> Installation Guidelines <ul> <li>The location must not be subject to excessive vibration or impulse shock.  </li> <li>The location must not exceed the environmental limits for the temperature.  </li> <li>The location must provide a mounting surface that is of sufficient strength to support the weight of the SPRINT-Nav Mini safely and without flexing.  </li> <li>The location must provide access for power and communication connections.  </li> <li>The location must provide line of sight to the seabed for all four DVL transducers abiding by the clearance levels. </li> </ul>"},{"location":"integration/#time","title":"Time","text":"<p>The SPRINT-Nav Mini can be time synchronised to UTC. This can be achieved via NTP or by providing a 1PPS signal and ZDA NMEA-0183 message from a GPS receiver or similar clock source. </p> <p>If the serial communication link has a known, stable latency then it is possible to use ZDA only, but 1PPS is recommended where possible. If the SPRINT-Nav Mini has been time synchronised and its quality is less than or equal to 0.5s it is possible to stop providing ZDA messages and simply rely on 1PPS aiding without any loss of accuracy.</p> <p>To improve robustness and usability, the SPRINT-Nav Mini incorporates a feature that automatically detects the relationship between the ZDA and 1PPS without any configuration. The SPRINT-Nav Mini achieves this by treating ZDA and 1PPS aiding separately: by filtering over several ZDA and 1PPS observations, it alleviates the requirement for a user to configure the ZDA and 1PPS relationship. In addition, the SPRINT-Nav Mini automatically detects the leading edge of the 1PPS trigger (assuming the pulse width is much less than 0.5s).  If external time synchronisation is lost the INS can continue to maintain an estimate of UTC time using its internal clock (~5ppm drift).</p> <p>The ZDA message should conform to the NMEA 0183 standard. The message can be received on any channel or over Ethernet. The 1PPS signal should be a 5V DC pulse with &gt;1 \u00b5s duration. The signal can be fed to SPRINT-Nav Mini via any of the trigger channels. </p> <p>There are three modes available:  </p> <ul> <li>None </li> <li>ZDA (+1PPS)</li> <li>NTP</li> </ul> <p>Time can also be output by a SPRINT-Nav Mini via an output ZDA + 1PPS, typically used for time synchronising other onboard survey sensors. </p>"},{"location":"integration/#sound-velocity","title":"Sound velocity","text":"<p>Accurate knowledge of Sound Velocity is crucial for Hybrid (DVL/INS) navigation, as such SPRINT-Nav Mini supports three types of SV. It is recommended to always use external SV for operations requiring high navigation accuracy. </p> <ul> <li>Manual<ul> <li>Provides an ability to type in a Manual SV, to be used when SV is very stable or as a backup. </li> </ul> </li> <li>Derived<ul> <li>Uses water temperature and a manually entered salinity value to calculate SV.</li> </ul> </li> <li>External <ul> <li>Uses an external SV sensor to input a direct read sound velocity into the SPRINT-Nav Mini.</li> </ul> </li> </ul> <p></p> Notes on SV <ul> <li>Sonardyne find that a 25mm SV sensor provides enough accuracy for navigation and minimises risk of damage to the SV sensor.</li> <li>Place the SV sensor as close to the DVL as possible.</li> <li>Place the SV Sensor within the same body of water as the DVL.</li> <li>Any error in SV will often appear as an along track error if no external aiding source is provided i.e. GNSS or USBL.    </li> </ul>"},{"location":"integration/#dvl-mounting","title":"DVL mounting","text":"<p>SPRINT-Nav Mini can be mounted at any angle however, typically the DVL is mounted facing directly down on the vehicle providing the best tracking of the seabed. Occasionally on trenchers or other vehicles where a direct view of the seabed is not possible, the DVL may be installed at an angle. </p> <p></p>"},{"location":"integration/#position-aiding","title":"Position aiding","text":""},{"location":"integration/#usbl","title":"USBL","text":"<p>SPRINT-Nav Mini supports USBL aiding via industry-standard telegrams. </p>"},{"location":"integration/#gnss","title":"GNSS","text":"<p>SPRINT-Nav Mini uses GNSS for aiding of both time and position via industry-standard telegrams.</p>"},{"location":"integration/#xpos","title":"XPOS","text":"<p>SPRINT-Nav Mini supports Sonardyne's proprietary XPOS message for aiding of generic position observations. Typically an XPOS message is provided to a SPRINT-Nav Mini when a vehicle is docked, initialising on deck or any scenario whereby a GNSS or USBL message is not appropriate. </p>"},{"location":"integration/#auv-x-sprint-nav-mini","title":"AUV x SPRINT-Nav Mini","text":"<p>SPRINT-Nav Mini has been designed for AUV integration and this section will describe an example integration into a 10\" AUV, with a common setup with a mix of input, output, C2 (command &amp; control) and peripheral survey sensors. </p> Inputs <ul> <li>GNSS</li> <li>USBL</li> <li>Sound Velocity </li> </ul> Outputs <ul> <li>HNAV</li> <li>ZDA + 1PPS</li> </ul> C2 <ul> <li>gRPC API</li> </ul> Survey Sensors <ul> <li>Voyis Recon - Laser</li> <li>Voyis Recon - Camera</li> </ul> <p></p>"},{"location":"integration/#mounting-location","title":"Mounting location","text":"<p>In this example the SPRINT-Nav Mini is mounted in the free flooded nose cone of a Sparus. The DVL has a clear view of the seabed with no obstructed beams. </p> <p></p>"},{"location":"integration/#aiding-sensors","title":"Aiding sensors","text":"<p>SPRINT-Nav Mini can have multiple aiding sensors enabled at once so it will seamlessly use GNSS on surface and USBL when it becomes available subsea. </p>"},{"location":"integration/#gnss_1","title":"GNSS","text":"<p>When on the surface the AUV receives both positioning updates (GGA) and timing (ZDA + 1PPS) from the onboard GNSS which is mounted on a mast at the rear of the vehicle. </p> GNSS aiding on an AUV <ul> <li>When configuring a GNSS in SPRINT-Nav Mini, consider that GNSS accuracy estimates are often optimistic. Sonardyne recommend setting a relaxed manual GNSS quality.</li> <li>GNSS often gives erroneous positions as a vehicle surfaces and when a vehicle dives. SPRINT-Nav Mini will reject data that falls outside its own position error estimate however, why not consider disabling GNSS when diving and for a period of time after breaking the surface. </li> <li>SPRINT-Nav Mini doesn't currently use VTG for velocity aiding, but will in the future. </li> </ul>"},{"location":"integration/#usbl_1","title":"USBL","text":"<p>When submerged, the AUV utilises Sonardyne's Mini Ranger 2 Robotics Pack to track an AvTrak 6 Nano mounted in the AUV. This AvTrak 6 Nano is used for communicating with the surface and also for sending position updates into the SPRINT-Nav Mini. </p> USBL Aiding a SPRINT-Nav Mini on an AUV <ul> <li>All AvTrak 6 nano's, when being tracked by \"Robotics Pack\", can output a time-stamped GGA message directly from their serial port in addition to the native SPOS format which can be interfaced directly to the SPRINT-Nav Mini. See the AvTrak 6 Nano manual for more details. </li> <li>Ranger 2 Robotics Pack can track up to 10 vehicles at once, simultaneously sending them correct absolute position information as well as exchanging telemetry. </li> </ul>"},{"location":"integration/#sound-velocity_1","title":"Sound velocity","text":"<p>For sound velocity a Valeport 25 mm SVS is used, outputting the valeport standard telegram into the vehicle control system and then over UDP into the SPRINT-Nav Mini.  </p>"},{"location":"integration/#outputs","title":"Outputs","text":""},{"location":"integration/#hnav","title":"HNAV","text":"<p>HNAV is output at 100 Hz for vehicle guidance purposes. All status flags are decoded and presented in the AUV Web UI so that the operator knows when it is ok for the vehicle to begin operations. Certain flags from the HNAV are decoded which will cause vehicle behaviours. See Reference for further details.</p> HNAV Notes <ul> <li>If an output message is populated at a rate quicker than the rate of the incoming sensor the HNAV status field will reflect invalid (because the flag indicates invalid or old). For example in a 100Hz output HNAV message, if DVL is coming into the SPRINT-Nav Mini at 10Hz, in excess of 90% of messages would be expected to have an invalid altitude flag. </li> <li>HNAV can be input directly into EIVA Naviscan in a traditional survey setup. </li> </ul>"},{"location":"integration/#timing","title":"Timing","text":"<p>Timing is crucial for survey deliverables as all sensors which are logging data must log against a common time base. This is typically UTC. SPRINT-Nav Mini can be configured to both receive time updates and will also persist time when subsea.</p> <p>In this example a ZDA + 1PPS output is configured from the SPRINT-Nav Mini into all survey sensors on the AUV. </p> ZDA + 1PPS output <ul> <li>Outputting a ZDA + 1PPS doesn't mean that time won't drift when the vehicle is subsea, but all sensors will be in the same time base. </li> <li>SPRINT-Nav Mini constantly models and monitors time, as such when the AUV surfaces and GNSS timing is available once again, SPRINT-Nav Mini's UTC time will adjust to reflect the correct UTC time. </li> </ul>"},{"location":"integration/#c2","title":"C2","text":"<p>Command and Control of a SPRINT-Nav Mini uses the Sonardyne gRPC API to modify settings dynamically during a mission as and when required, either autonomously or via the user-developed AUV interface. </p> Suggested SPRINT-Nav Mini C2 <ul> <li>Via the user-developed AUV interface the AUV operator can reset the INS algorithm instantaneously if required.</li> <li>If the vehicle/operator knows that GNSS is erroneous it can be disabled as an aiding source for a period of time. </li> <li>If the SPRINT-Nav HNAV message flags a problem with the Sound Velocity sensor, the C2 changes the SV configuration to derived and then manual. </li> <li>The user-developed AUV interface allows a user to select which aiding sources should be used by the AUV pre-dive without using the SPRINT-Nav Mini user interface.</li> <li>The gRPC API is much lower bandwidth than the web UI allowing for over the horizon low bandwidth operations. </li> </ul>"},{"location":"integration/#data","title":"Data","text":"<p>For high accuracy survey products, [Janus] (https://www.sonardyne.com/products/janus-ins-post-processing-software/) is commonly used. In this example logfiles are downloaded at the end of the mission via the web UI. </p> Data for long duration AUVs <ul> <li>SPRINT-Nav Mini will log data internally for 2 to 3 days. Less if raw DVL data is logged. </li> <li>For long duration missions the vehicle control system can periodically download logfiles from the unit via SFTP. </li> </ul>"},{"location":"integration/#auv-lessons-learnt","title":"AUV lessons learnt","text":"<p>Sonardyne's applications engineering team have integrated SPRINT-Nav Mini into many different vehicles and have collated some best practice.  </p> Lessons learned <ul> <li>Consider the orientation of DVL beams, if following a pipeline is there a better orientation to keep all DVL beams facing the seabed?</li> <li>If HNAV indicates that SV is no longer valid, why not switch back to derived, or manual?</li> </ul>"},{"location":"json_reference/","title":"JSON reference","text":""},{"location":"json_reference/#json-protocol-reference","title":"JSON Protocol Reference","text":"<p>This is a comprehensive reference on how to effectively utilise the JSON interface. You will find detailed explanations and practical examples that illustrate how to interact with and leverage the capabilities of the JSON interface.</p>"},{"location":"json_reference/#getting-state","title":"Getting StateCommandResponseCommandResponse","text":"Get Version <p>Sending this JSON object will request the current version information</p> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.common.VersionRequest\"\n}\n</code></pre> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.common.VersionResponse\",\n\"major\": 2,\n\"minor\": 0,\n\"patch\": 0\n}\n</code></pre> Get Configuration <p>Sending this JSON object will request the current state of the instrument</p> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationRequest\",\n\"requestor\": \"Source of Request\"\n}\n</code></pre> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"timestamp\": {\n\"common_time_seconds\": 0,\n\"instrument_time_seconds\": 1894856.99781867\n},\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.AidingConfiguration\",\n\"enable_gnss\": {\n\"value\": \"ENABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n},\n\"enable_xpos\": {\n\"value\": \"ENABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n},\n\"enable_usbl\": {\n\"value\": \"DISABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n}\n},\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.SoundVelocityConfiguration\",\n\"sound_velocity_type\": {\n\"value\": \"EXTERNAL\",\n\"valid_values\": [\n\"EXTERNAL\",\n\"INTERNAL_SALINITY\",\n\"INTERNAL_MANUAL\"\n]\n},\n\"manual_salinity_value_parts_per_thousand\": {\n\"value\": 32.1,\n\"min\": 0,\n\"max\": 40\n},\n\"manual_velocity_value_metres_per_second\": {\n\"value\": 1500,\n\"min\": 1400,\n\"max\": 1600\n}\n},\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.DvlConfiguration\",\n\"update_rate\": {\n\"value\": \"FIXED_1HZ\",\n\"valid_values\": [\n\"MAX_RATE\",\n\"FIXED_1HZ\",\n\"FIXED_2HZ\",\n\"FIXED_5HZ\",\n\"FIXED_10HZ\",\n\"TRIGGER_RISING\",\n\"TRIGGER_FALLING\"\n]\n}\n}\n]\n}\n</code></pre>"},{"location":"json_reference/#setting-state","title":"Setting StateCommandResponseValid ValuesNested ResultCommand &amp; ParametersResponseCommand &amp; ParametersResponseCommand &amp; ParametersResponseCommandResponse","text":"Set State (Introduction) <p>The root JSON object contains two properties :'@type' and configuration</p> <ul> <li>@type is a string property with the value type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope</li> <li>configuration is an array which can contain one or more configuration types, each configuration has its own @type property</li> <li>{ConfigurationType} shown in the command below is a placeholder and should be replaced with a specific configuration type. This allows the configuration array to hold various types of configuration objects, each identified by their own type</li> </ul> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.{ConfigurationType}\"             }\n]\n}\n</code></pre> <p>The response message is also a type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope type sharing the same properties as the command structure.  The array of returned {ConfigurationType} will correspond to the configurations sent.</p> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"timestamp\": {\n\"common_time_seconds\": 0,\n\"instrument_time_seconds\": 1898031.49847554\n},\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.{ConfigurationType}\",\n\"result\": {\n\"success\": \"SUCCESS\",\n\"message\": \"\"\n},      }\n]\n}\n</code></pre>  All returned values where applicable within a configuration will contain an array with the valid range of values for that property, for example :  <pre><code>\"update_rate\": {\n\"value\": \"FIXED_1HZ\",\n\"valid_values\": [\n\"MAX_RATE\",\n\"FIXED_1HZ\",\n\"FIXED_2HZ\",\n\"FIXED_5HZ\",\n\"FIXED_10HZ\",\n\"TRIGGER_RISING\",\n\"TRIGGER_FALLING\"\n]\n}\n</code></pre>  Each nested {ConfigurationType} response will contain a 'result' property.  This will indicate the success state of all command requests <ul> <li>success A string indicating command success [SUCCESS,FAILURE,INVALID,RESTRICTED]</li> <li>message A string for any additional messages that may be pertinent if the command is not successful</li> </ul> <pre><code>\"result\": {\n\"success\": \"SUCCESS\",\n\"message\": \"\"\n}\n</code></pre> Set Aiding Configuration <ul> <li>enableGnss valid values [ENABLED,DISABLED]</li> <li>enableXpos valid values [ENABLED,DISABLED]</li> <li>enableUsbl valid values [ENABLED,DISABLED]</li> </ul> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.AidingConfiguration\",\n\"enableGnss\": {\n\"value\": \"ENABLED\"\n},\n\"enableXpos\": {\n\"value\": \"DISABLED\"\n},\n\"enableUsbl\": {\n\"value\": \"DISABLED\"\n}\n}\n]\n}\n</code></pre> Note : Not all properties need to be set, individual properties can be configured separately   <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"timestamp\": {\n\"common_time_seconds\": 0,\n\"instrument_time_seconds\": 1919664.02866484\n},\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.AidingConfiguration\",\n\"result\": {\n\"success\": \"SUCCESS\",\n\"message\": \"\"\n},\n\"enable_gnss\": {\n\"value\": \"ENABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n},\n\"enable_xpos\": {\n\"value\": \"DISABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n},\n\"enable_usbl\": {\n\"value\": \"DISABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n}\n}\n]\n}\n</code></pre> Set DVL Configuration <ul> <li> updateRate valid values [MAX_RATE, FIXED_1HZ, FIXED_2HZ, FIXED_5HZ, FIXED_10HZ, TRIGGER_RISING, TRIGGER_FALLING]</li> </ul> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.DvlConfiguration\", \"updateRate\": {\n\"value\": \"FIXED_1HZ\"\n}\n}\n]\n}\n</code></pre> Note : Not all properties need to be set, individual properties can be configured separately   <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"timestamp\": {\n\"common_time_seconds\": 0,\n\"instrument_time_seconds\": 1916074.48673176\n},\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.DvlConfiguration\",   \"result\": {\n\"success\": \"SUCCESS\",\n\"message\": \"\"\n},\n\"update_rate\": {\n\"value\": \"FIXED_1HZ\",\n\"valid_values\": [\n\"MAX_RATE\",\n\"FIXED_1HZ\",\n\"FIXED_2HZ\",\n\"FIXED_5HZ\",\n\"FIXED_10HZ\",\n\"TRIGGER_RISING\",\n\"TRIGGER_FALLING\"\n]\n}\n}\n]\n</code></pre> Set Sound Velocity Configuration <ul> <li> soundVelocityType valid values are [EXTERNAL, INTERNAL_SALINITY, INTERNAL_MANUAL]</li> <li> manualSalinityValuePartsPerThousand valid values are 0 to 40</li> <li> manualVelocityValueMetresPerSecond valid values are 1400 to 1600</li> </ul> <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.SoundVelocityConfiguration\",\n\"soundVelocityType\": {\n\"value\": \"EXTERNAL\"\n},\n\"manualSalinityValuePartsPerThousand\": {\n\"value\": 40.0\n},\n\"manualVelocityValueMetresPerSecond\": {\n\"value\": 1500.0\n}\n}\n]\n}\n</code></pre> Note : Not all properties need to be set, individual properties can be configured separately   <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"timestamp\": {\n\"common_time_seconds\": 0,\n\"instrument_time_seconds\": 1918491.19956508\n},\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.SoundVelocityConfiguration\",\n\"result\": {\n\"success\": \"SUCCESS\",\n\"message\": \"\"\n},\n\"sound_velocity_type\": {\n\"value\": \"EXTERNAL\",\n\"valid_values\": [\n\"EXTERNAL\",\n\"INTERNAL_SALINITY\",\n\"INTERNAL_MANUAL\"\n]\n},\n\"manual_salinity_value_parts_per_thousand\": {\n\"value\": 40,\n\"min\": 0,\n\"max\": 40\n},\n\"manual_velocity_value_metres_per_second\": {\n\"value\": 1500,\n\"min\": 1400,\n\"max\": 1600\n}\n}\n]\n}\n</code></pre> Set Multiple Configurations Simultaneously  The following command show how to embed multiple configuration objects in the configuration array <pre><code>{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.AidingConfiguration\",       \"enableGnss\": {\n\"value\": \"ENABLED\"\n},\n\"enableXpos\": {\n\"value\": \"DISABLED\"\n},\n\"enableUsbl\": {\n\"value\": \"DISABLED\"\n}\n},\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.SoundVelocityConfiguration\",\n\"soundVelocityType\": {\n\"value\": \"EXTERNAL\"\n},\n\"manualSalinityValuePartsPerThousand\": {\n\"value\": 40.0\n},\n\"manualVelocityValueMetresPerSecond\": {\n\"value\": 1500.0\n}\n},\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.DvlConfiguration\",\n\"updateRate\": {\n\"value\": \"FIXED_1HZ\"\n}\n}\n]\n}\n</code></pre>  The response show how multiple responses being delivered, each one with a result object indicating success state <pre><code> \"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.ConfigurationEnvelope\",\n\"timestamp\": {\n\"common_time_seconds\": 0,\n\"instrument_time_seconds\": 1922242.57665971\n},\n\"configuration\": [\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.AidingConfiguration\",\n\"result\": {\n\"success\": \"SUCCESS\",\n\"message\": \"\"\n},\n\"enable_gnss\": {\n\"value\": \"ENABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n},\n\"enable_xpos\": {\n\"value\": \"DISABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n},\n\"enable_usbl\": {\n\"value\": \"DISABLED\",\n\"valid_values\": [\n\"ENABLED\",\n\"DISABLED\"\n]\n}\n},\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.SoundVelocityConfiguration\",\n\"result\": {\n\"success\": \"SUCCESS\",\n\"message\": \"\"\n},\n\"sound_velocity_type\": {\n\"value\": \"EXTERNAL\",\n\"valid_values\": [\n\"EXTERNAL\",\n\"INTERNAL_SALINITY\",\n\"INTERNAL_MANUAL\"\n]\n},\n\"manual_salinity_value_parts_per_thousand\": {\n\"value\": 40,\n\"min\": 0,\n\"max\": 40\n},\n\"manual_velocity_value_metres_per_second\": {\n\"value\": 1500,\n\"min\": 1400,\n\"max\": 1600\n}\n},\n{\n\"@type\": \"type.googleapis.com/sonardyne.api.pub.configuration.DvlConfiguration\",\n\"result\": {\n\"success\": \"SUCCESS\",\n\"message\": \"\"\n},\n\"update_rate\": {\n\"value\": \"FIXED_1HZ\",\n\"valid_values\": [\n\"MAX_RATE\",\n\"FIXED_1HZ\",\n\"FIXED_2HZ\",\n\"FIXED_5HZ\",\n\"FIXED_10HZ\",\n\"TRIGGER_RISING\",\n\"TRIGGER_FALLING\"\n]\n}\n}\n]\n}\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#third-party-licenses","title":"Third-Party licenses","text":""},{"location":"license/#grpc","title":"gRPC","text":"<p>gRPC and its documentation is licensed under Apache 2.0.</p>"},{"location":"license/#json","title":"JSON","text":"<p>JSON is licensed under a modified MIT license.</p>"},{"location":"license/#mkdocs","title":"MkDocs","text":"<p>MkDocs is licensed under BSD.</p>"},{"location":"license/#protoc-gen-doc","title":"protoc-gen-doc","text":"<p>protoc-gen-doc is licensed under MIT.</p>"},{"location":"license/#sonardyne","title":"Sonardyne","text":"<p>All example code and documentation is licensed under MIT.</p>"},{"location":"protocol_reference/","title":"Protocol buffer reference","text":"<p>The below reference is automatically generated from the proto files, therefore some fields are blank.</p>"},{"location":"protocol_reference/#protocol-documentation","title":"Protocol Documentation","text":""},{"location":"protocol_reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Protocol Documentation</li> <li>Table of Contents</li> <li>sonardyne-public/idl/common/primitives.proto<ul> <li>BoundedDouble</li> <li>BoundedFloat</li> <li>BoundedInt32</li> <li>BoundedInt64</li> <li>BoundedUInt32</li> <li>BoundedUInt64</li> <li>Fixed32Value</li> <li>Fixed64Value</li> <li>SFixed32Value</li> <li>SFixed64Value</li> <li>SInt32Value</li> <li>SInt64Value</li> </ul> </li> <li>sonardyne-public/idl/common/result.proto<ul> <li>Result</li> <li>Result.Outcome</li> </ul> </li> <li>sonardyne-public/idl/common/timestamp.proto<ul> <li>Timestamp</li> </ul> </li> <li>sonardyne-public/idl/common/uid.proto<ul> <li>Uid</li> </ul> </li> <li>sonardyne-public/idl/common/version.proto<ul> <li>VersionRequest</li> <li>VersionResponse</li> </ul> </li> <li>sonardyne-public/idl/configuration/aiding_configuration.proto<ul> <li>AidingConfiguration</li> <li>AidingState</li> <li>AidingState.AidingStateEnum</li> </ul> </li> <li>sonardyne-public/idl/configuration/configuration_envelope.proto<ul> <li>ConfigurationEnvelope</li> <li>ConfigurationRequest</li> </ul> </li> <li>sonardyne-public/idl/configuration/dvl_configuration.proto<ul> <li>DvlConfiguration</li> <li>DvlUpdateRate</li> <li>DvlUpdateRate.DvlUpdateRateEnum</li> </ul> </li> <li>sonardyne-public/idl/configuration/reset_configuration.proto<ul> <li>ResetConfiguration</li> <li>ResetType</li> <li>ResetType.ResetTypeEnum</li> </ul> </li> <li>sonardyne-public/idl/configuration/shutdown_configuration.proto<ul> <li>ShutdownConfiguration</li> </ul> </li> <li>sonardyne-public/idl/configuration/sound_velocity_configuration.proto<ul> <li>SoundVelocityConfiguration</li> <li>SoundVelocityType</li> <li>SoundVelocityType.SoundVelocityTypeEnum</li> </ul> </li> <li>sonardyne-public/idl/services/state_service.proto<ul> <li>StateService</li> </ul> </li> <li>Scalar Value Types</li> </ul> <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlcommonprimitivesproto","title":"sonardyne-public/idl/common/primitives.proto","text":""},{"location":"protocol_reference/#boundeddouble","title":"BoundedDouble","text":"Field Type Label Description value double The value min double The minimum value (read only) max double The maximum value (read only)"},{"location":"protocol_reference/#boundedfloat","title":"BoundedFloat","text":"Field Type Label Description value float The value min float The minimum value (read only) max float The maximum value (read only)"},{"location":"protocol_reference/#boundedint32","title":"BoundedInt32","text":"Field Type Label Description value int32 The value min int32 The minimum value (read only) max int32 The maximum value (read only)"},{"location":"protocol_reference/#boundedint64","title":"BoundedInt64","text":"Field Type Label Description value int64 The value min int64 The minimum value (read only) max int64 The maximum value (read only)"},{"location":"protocol_reference/#boundeduint32","title":"BoundedUInt32","text":"Field Type Label Description value uint32 The value min uint32 The minimum value (read only) max uint32 The maximum value (read only)"},{"location":"protocol_reference/#boundeduint64","title":"BoundedUInt64","text":"Field Type Label Description value uint64 The value min uint64 The minimum value (read only) max uint64 The maximum value (read only)"},{"location":"protocol_reference/#fixed32value","title":"Fixed32Value","text":"Field Type Label Description value fixed32 The value min fixed32 The minimum value (read only) max fixed32 The maximum value (read only)"},{"location":"protocol_reference/#fixed64value","title":"Fixed64Value","text":"Field Type Label Description value fixed64 The value min fixed64 The minimum value (read only) max fixed64 The maximum value (read only)"},{"location":"protocol_reference/#sfixed32value","title":"SFixed32Value","text":"Field Type Label Description value sfixed32 The value min sfixed32 The minimum value (read only) max sfixed32 The maximum value (read only)"},{"location":"protocol_reference/#sfixed64value","title":"SFixed64Value","text":"Field Type Label Description value sfixed64 The value min sfixed64 The minimum value (read only) max sfixed64 The maximum value (read only)"},{"location":"protocol_reference/#sint32value","title":"SInt32Value","text":"Field Type Label Description value sint32 The value min sint32 The minimum value (read only) max sint32 The maximum value (read only)"},{"location":"protocol_reference/#sint64value","title":"SInt64Value","text":"Field Type Label Description value sint64 The value min sint64 The minimum value (read only) max sint64 The maximum value (read only) <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlcommonresultproto","title":"sonardyne-public/idl/common/result.proto","text":""},{"location":"protocol_reference/#result","title":"Result","text":"Field Type Label Description success Result.Outcome Indicates success or failure. True for success, otherwise False message string Description of the operations result"},{"location":"protocol_reference/#resultoutcome","title":"Result.Outcome","text":"Name Number Description UNSPECIFIED 0 Result of operation unspecified (default value) SUCCESS 1 Operation has succeeded FAILURE 2 Operation has failed INVALID 3 Operation has been given invalid parameters RESTRICTED 4 Operation is not allowed - user does not have permission, or instrument is not in the correct mode. <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlcommontimestampproto","title":"sonardyne-public/idl/common/timestamp.proto","text":""},{"location":"protocol_reference/#timestamp","title":"Timestamp","text":"Field Type Label Description common_time_seconds double Time since the UNIX epoch (01/01/1970) in seconds and fractional seconds instrument_time_seconds double Monotonically increasing instrument time in seconds and fractional seconds <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlcommonuidproto","title":"sonardyne-public/idl/common/uid.proto","text":""},{"location":"protocol_reference/#uid","title":"Uid","text":"<p>Used to identify a recipient</p> Field Type Label Description uid uint32 Unique identifier of a recipient name string Human-readable recipient name populated in reply <p></p> <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlcommonversionproto","title":"sonardyne-public/idl/common/version.proto","text":""},{"location":"protocol_reference/#versionrequest","title":"VersionRequest","text":""},{"location":"protocol_reference/#versionresponse","title":"VersionResponse","text":"<p>A message that contains Semantic Versioning which comprises a three part version number: Major.Minor.Patch</p> Field Type Label Description major uint32 MAJOR version incremented for incompatible changes that break existing clients. minor uint32 MINOR version incremented for backward-compatible features or enhancements. patch uint32 PATCH version incremented for backward-compatible bug fixes or patches. <p></p> <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlconfigurationaiding_configurationproto","title":"sonardyne-public/idl/configuration/aiding_configuration.proto","text":""},{"location":"protocol_reference/#aidingconfiguration","title":"AidingConfiguration","text":"<p>Position aiding configuration, defines which position input(s) to use for aiding</p> Field Type Label Description id sonardyne.api.pub.common.Uid Used to identify recipient instrument/module result sonardyne.api.pub.common.Result Populated by instrument when replying to a SetState indicating the success of the operation enable_gnss AidingState Used to turn GNSS aiding on or off enable_xpos AidingState Used to turn XPOS aiding on or off enable_usbl AidingState Used to turn USBL aiding on or off <p></p>"},{"location":"protocol_reference/#aidingstate","title":"AidingState","text":"Field Type Label Description value AidingState.AidingStateEnum The state of the aiding valid_values AidingState.AidingStateEnum repeated The valid values for the aiding state"},{"location":"protocol_reference/#aidingstateaidingstateenum","title":"AidingState.AidingStateEnum","text":"Name Number Description UNKNOWN 0 ENABLED 1 DISABLED 2 <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlconfigurationconfiguration_envelopeproto","title":"sonardyne-public/idl/configuration/configuration_envelope.proto","text":""},{"location":"protocol_reference/#configurationenvelope","title":"ConfigurationEnvelope","text":"<p>A container of instrument configurations, a timestamp and a result.</p> Field Type Label Description timestamp sonardyne.api.pub.common.Timestamp Timestamp of the configuration result sonardyne.api.pub.common.Result Populated by instrument when replying to a SetState indicating the success of the operation configuration google.protobuf.Any repeated The configuration data - can be any of AidingConfiguration, DvlConfiguration, ResetConfiguration, ShutdownConfiguration or SoundVelocityConfiguration <p></p>"},{"location":"protocol_reference/#configurationrequest","title":"ConfigurationRequest","text":"Field Type Label Description timestamp sonardyne.api.pub.common.Timestamp Timestamp of the request requestor string Optional user-definable field <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlconfigurationdvl_configurationproto","title":"sonardyne-public/idl/configuration/dvl_configuration.proto","text":""},{"location":"protocol_reference/#dvlconfiguration","title":"DvlConfiguration","text":"<p>Doppler Velocity Log configuration which controls the update rate</p> Field Type Label Description id sonardyne.api.pub.common.Uid Used to identify recipient instrument/module result sonardyne.api.pub.common.Result Populated by instrument when replying to a SetState indicating the success of the operation update_rate DvlUpdateRate Specifies the update rate <p></p>"},{"location":"protocol_reference/#dvlupdaterate","title":"DvlUpdateRate","text":"Field Type Label Description value DvlUpdateRate.DvlUpdateRateEnum The type of reset to execute valid_values DvlUpdateRate.DvlUpdateRateEnum repeated The valid values for the reset type"},{"location":"protocol_reference/#dvlupdateratedvlupdaterateenum","title":"DvlUpdateRate.DvlUpdateRateEnum","text":"Name Number Description UNKNOWN 0 TRIGGER_RISING 1 Use external trigger (rising edge) TRIGGER_FALLING 2 Use external trigger (falling edge) MAX_RATE 3 Use max supported update rate FIXED_1HZ 4 Use fixed 1Hz rate FIXED_2HZ 5 Use fixed 2Hz rate FIXED_5HZ 6 Use fixed 5Hz rate FIXED_10HZ 7 Use fixed 10Hz rate <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlconfigurationreset_configurationproto","title":"sonardyne-public/idl/configuration/reset_configuration.proto","text":""},{"location":"protocol_reference/#resetconfiguration","title":"ResetConfiguration","text":"<p>Set type of reset to execute</p> Field Type Label Description id sonardyne.api.pub.common.Uid Used to identify recipient instrument/module result sonardyne.api.pub.common.Result Populated by instrument when replying to a SetState indicating the success of the operation reset_type ResetType Indicates the type of reset required <p></p>"},{"location":"protocol_reference/#resettype","title":"ResetType","text":"Field Type Label Description value ResetType.ResetTypeEnum The type of reset to execute valid_values ResetType.ResetTypeEnum repeated The valid values for the reset type"},{"location":"protocol_reference/#resettyperesettypeenum","title":"ResetType.ResetTypeEnum","text":"Name Number Description UNKNOWN 0 SOFT_RESET 1 See instrument manual for description HARD_RESET 2 See instrument manual for description <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlconfigurationshutdown_configurationproto","title":"sonardyne-public/idl/configuration/shutdown_configuration.proto","text":""},{"location":"protocol_reference/#shutdownconfiguration","title":"ShutdownConfiguration","text":"Field Type Label Description id sonardyne.api.pub.common.Uid Used to identify recipient instrument/module result sonardyne.api.pub.common.Result Populated by instrument when replying to a SetState indicating the success of the operation <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlconfigurationsound_velocity_configurationproto","title":"sonardyne-public/idl/configuration/sound_velocity_configuration.proto","text":""},{"location":"protocol_reference/#soundvelocityconfiguration","title":"SoundVelocityConfiguration","text":"<p>Sound Velocity configuration which controls the type of trigger to use</p> Field Type Label Description id sonardyne.api.pub.common.Uid Used to identify recipient instrument/module result sonardyne.api.pub.common.Result Populated by instrument when replying to a SetState indicating the success of the operation sound_velocity_type SoundVelocityType Define the Sound Velocity source manual_salinity_value_parts_per_thousand sonardyne.api.pub.common.BoundedDouble Used if Sound Velocity type is INTERNAL_SALINITY manual_velocity_value_metres_per_second sonardyne.api.pub.common.BoundedDouble Used if Sound Velocity type is INTERNAL_MANUAL <p></p>"},{"location":"protocol_reference/#soundvelocitytype","title":"SoundVelocityType","text":"Field Type Label Description value SoundVelocityType.SoundVelocityTypeEnum Define the Sound Velocity source valid_values SoundVelocityType.SoundVelocityTypeEnum repeated Define the range of valid values"},{"location":"protocol_reference/#soundvelocitytypesoundvelocitytypeenum","title":"SoundVelocityType.SoundVelocityTypeEnum","text":"Name Number Description UNKNOWN 0 EXTERNAL 1 Use external - N.B. The port must be specified in the webUI INTERNAL_SALINITY 2 Use internal (derived from salinity) INTERNAL_MANUAL 3 Use manually defined value <p>Top</p>"},{"location":"protocol_reference/#sonardyne-publicidlservicesstate_serviceproto","title":"sonardyne-public/idl/services/state_service.proto","text":""},{"location":"protocol_reference/#stateservice","title":"StateService","text":"Method Name Request Type Response Type Description GetVersion pub.common.VersionRequest pub.common.VersionResponse Gets the api protocol version SetState pub.configuration.ConfigurationEnvelope pub.configuration.ConfigurationEnvelope Sets instrument configuration. Returns the updated configuration, result, and timestamp GetState pub.configuration.ConfigurationRequest pub.configuration.ConfigurationEnvelope Gets instrument configuration. The 'ConfigurationRequest' contains required instrument specific configuration type StateStream pub.configuration.ConfigurationRequest pub.configuration.ConfigurationEnvelope stream A stream which publishes all state changes on the instrument."},{"location":"protocol_reference/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"quick-start/","title":"Quick start","text":""},{"location":"quick-start/#choice-of-technology","title":"Choice of Technology","text":"<p>See Technology Explainer for more information on the two available API choices for Command and Control. gRPC and JSON will both support control of Sonardyne instruments listed here. However, gRPC is a more expandable interface which will be extended to include real-time data and more configuration options, so is recommended for most integrations. </p>"},{"location":"quick-start/#connecting-to-the-api","title":"Connecting to the API","text":""},{"location":"quick-start/#configuring-grpc-or-json-via-web-ui","title":"Configuring gRPC or JSON via Web UI","text":"<p>The 'External Control' page in the webUI (located under Configuration&gt;System&gt;Connections) allows selection of a gRPC or JSON interface. The JSON interface operates via any of the ports specified under the 'Network' tab, whereas the gRPC interface operates a TCP server on the port number specified in the webUI.</p> Network Ports <p>Please note there is currently no cross-validation between the gRPC server and the other Network ports, you must ensure that the gRPC port number is not already in use in the Network tab.</p> <p>Example screenshot from SPRINT-Nav Mini Web UI </p>"},{"location":"quick-start/#accessing-proto-files","title":"Accessing .proto files","text":"<p>The .proto files which define the API will be needed before messages can be sent or received via gRPC. These files can be downloaded from the Releases page of the son-idl repo. They can also be found in the <code>idl</code> folder of this repo, alongside an explanation of all fields, provided by the <code>README.md</code> in the <code>idl</code> folder.</p>"},{"location":"quick-start/#sending-initial-commands","title":"Sending initial commands","text":"<p>The API implements three functions:</p> <ul> <li>GetVersion will return the API version number</li> <li>GetState will return the settings of the instrument</li> <li>SetState will update the instrument settings</li> </ul>"},{"location":"quick-start/#developmentdebugging-tools","title":"Development/Debugging Tools","text":"<p>See external reference.</p>"},{"location":"quick-start/#development-of-a-grpc-client","title":"Development of a gRPC client","text":""},{"location":"quick-start/#python-example","title":"Python Example","text":"<p>These steps are largely based on the grpc Python tutorial.</p> <ul> <li>Install gRPC and gRPC tools (protoc and code generation): <code>python -m pip install grpcio grpcio-tools</code></li> <li>Download .proto files and put them in a <code>protos</code> directory in your python project.</li> <li>Generate python code from the .protos: <code>python -m grpc_tools.protoc --proto_path=./protos --python_out=. --grpc_python_out=.  ./protos/*.proto</code></li> </ul> <p>This will generate a few files - as a grpc client we are primarily interested in importing service_pb2_grpc, which will allow us to use GetState, SetState, and GetVersion.</p> Example python code example_code/py/GrpcClient.py<pre><code>#Copyright 2024 Sonardyne\n\n#Permission is hereby granted, free of charge, to any person obtaining a copy\n#of this software and associated documentation files (the \u201cSoftware\u201d), to deal\n#in the Software without restriction, including without limitation the rights\n#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n#copies of the Software, and to permit persons to whom the Software is furnished\n#to do so, subject to the following conditions:\n\n#The above copyright notice and this permission notice shall be included in\n#all copies or substantial portions of the software.\n\n#THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n#WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n#CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport proto_generate\nproto_generate.proto_generate()\n\nimport grpc\nimport google.protobuf.any_pb2\n\nfrom sonardyne_public.idl.common import version_pb2\nfrom sonardyne_public.idl.configuration import dvl_configuration_pb2\nfrom sonardyne_public.idl.services import state_service_pb2_grpc\nfrom sonardyne_public.idl.configuration import reset_configuration_pb2\nfrom sonardyne_public.idl.configuration import aiding_configuration_pb2\nfrom sonardyne_public.idl.configuration import configuration_envelope_pb2\nfrom sonardyne_public.idl.configuration import sound_velocity_configuration_pb2\n\nfrom google.protobuf.json_format import MessageToJson\n\n\ndef SetExampleState(stub):    \n    # Create the envelope containing the new config.\n    #  Envelopes also contain 'timestamp' and 'result' fields which are populated in the instrument reply.\n    configuration_envelope = configuration_envelope_pb2.ConfigurationEnvelope()\n\n    # Each type of configuration is stored as a list. This is reserved for future use as not all units support multiple configurations.\n\n    # Create and add a reset config to perform a soft reset\n    reset_config = reset_configuration_pb2.ResetConfiguration(reset_type=\"SOFT_RESET\")        \n    configuration_envelope.configuration.add().CopyFrom(google.protobuf.any_pb2.Any().Pack(reset_config))\n\n    # Create and add an aiding config to enable GNSS aiding and disable USBL aiding\n    aiding_config_enable_gnss = aiding_configuration_pb2.AidingConfiguration(enable_gnss=\"ENABLED\", enable_usbl=\"DISABLED\")\n    configuration_envelope.configuration.add().CopyFrom(google.protobuf.any_pb2.Any().Pack(aiding_config_enable_gnss))\n\n    # Create and add a sound velocity config to set the SV source to salinity-derived and set the SV salinity to an arbitrary value\n    sv_config_salinity_derived = sound_velocity_configuration_pb2.SoundVelocityConfiguration(sound_velocity_type=\"INTERNAL_SALINITY\", manual_salinity_value=32.1)\n    configuration_envelope.configuration.add().CopyFrom(google.protobuf.any_pb2.Any().Pack(sv_config_salinity_derived))\n\n    # Create and add a DVL config to set the update rate to an arbitrary choice\n    dvl_config_1Hz = dvl_configuration_pb2.DopplerVelocityLogConfiguration(update_rate=\"FIXED_1HZ\")\n    configuration_envelope.configuration.add().CopyFrom(google.protobuf.any_pb2.Any().Pack(dvl_config_1Hz))    \n\n    # Perform the SetState with the new envelope\n    result_envelope = stub.SetState(configuration_envelope)\n\n    # Returned envelope contains the current state of the updated settings, as well as a result field\n    print(\"Received ConfigurationEnvelope reply:\\n{}\".format(result_envelope))\n\nwith grpc.insecure_channel('127.0.0.1:1234') as channel: # NOTE: Change the IP Address and Port to match the Instrument and its gRPC configuration.\n    stub = state_service_pb2_grpc.StateServiceStub(channel)\n\n    # Get the version number of the API\n    version_result = stub.GetVersion(version_pb2.VersionRequest())\n    print(\"Called GetVersion: v{}.{}\".format(version_result.major, version_result.minor))\n\n    # Get the current state of the instrument\n    result_config_envelope = stub.GetState(configuration_envelope_pb2.ConfigurationRequest(requestor=\"PyGrpcClient\"))\n\n    for (config) in result_config_envelope.configuration:        \n        if config.Is(aiding_configuration_pb2.AidingConfiguration.DESCRIPTOR):\n            aiding_config = aiding_configuration_pb2.AidingConfiguration()\n            config.Unpack(aiding_config)\n            print(\"Current Aiding Configuration: {}\".format(MessageToJson(aiding_config)))\n        if config.Is(dvl_configuration_pb2.DvlConfiguration.DESCRIPTOR):\n            dvl_config = dvl_configuration_pb2.DvlConfiguration()\n            config.Unpack(dvl_config)\n            print(\"Current DVL Configuration: {}\".format(MessageToJson(dvl_config)))\n        if config.Is(reset_configuration_pb2.ResetConfiguration.DESCRIPTOR):\n            reset_config = reset_configuration_pb2.ResetConfiguration()\n            config.Unpack(reset_config)\n            print(\"Current Reset Configuration: {}\".format(MessageToJson(reset_config)))\n        if config.Is(sound_velocity_configuration_pb2.SoundVelocityConfiguration.DESCRIPTOR):\n            sound_velocity_config = sound_velocity_configuration_pb2.SoundVelocityConfiguration()\n            config.Unpack(sound_velocity_config)        \n            print(\"Current Sound Velocity Configuration: {}\".format(MessageToJson(sound_velocity_config)))        \n</code></pre>"},{"location":"quick-start/#c-example","title":"C# Example","text":"<p>The recommended implementation for gRPC with .NET is now grpc-dotnet. Microsoft provide a tutorial on its use.</p> <p>The .csproj file needs to be modified to include the proto files and proto directory,  and to specify the project as a gRPC client, e.g. <code>&lt;Protobuf Include=\"service.proto\" ProtoRoot=\"protos/\" GrpcServices=\"Client\"/&gt;</code> Note that a wildcard <code>*</code> can be used e.g. <code>Include=\"*.proto\"</code>, however this was found to cause problems with certain ProtoRoot directories and be less clear when debugging.</p> Example C# code example_code/cs/SonGrpcClient.csproj<pre><code>&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\n\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;net7.0&lt;/TargetFramework&gt;\n    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\n    &lt;Nullable&gt;enable&lt;/Nullable&gt; \n  &lt;/PropertyGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\common\\Primitives.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\common\\Result.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\common\\Timestamp.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\common\\Uid.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\common\\Version.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\configuration\\AidingConfiguration.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\configuration\\ConfigurationEnvelope.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\configuration\\DvlConfiguration.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\configuration\\ResetConfiguration.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\configuration\\ShutdownConfiguration.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\configuration\\SoundVelocityConfiguration.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\services\\StateService.cs\" /&gt;\n    &lt;Compile Remove=\"sonardyne-public\\idl\\services\\StateServiceGrpc.cs\" /&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\common\\Primitives.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\common\\Result.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\common\\Timestamp.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\common\\Uid.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\common\\Version.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\configuration\\AidingConfiguration.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\configuration\\ConfigurationEnvelope.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\configuration\\DvlConfiguration.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\configuration\\ResetConfiguration.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\configuration\\ShutdownConfiguration.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\configuration\\SoundVelocityConfiguration.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\services\\StateService.cs\" /&gt;\n    &lt;None Include=\"sonardyne-public\\idl\\services\\StateServiceGrpc.cs\" /&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"Google.Protobuf\" Version=\"3.27.2\" /&gt;\n    &lt;PackageReference Include=\"Grpc.Net.client\" Version=\"2.63.0\" /&gt;\n    &lt;PackageReference Include=\"Grpc.Tools\" Version=\"2.64.0\"&gt;\n      &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;      \n    &lt;/PackageReference&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\common\\primitives.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\common\\result.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\common\\timestamp.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\common\\uid.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\common\\version.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\configuration\\reset_configuration.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\configuration\\aiding_configuration.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt; \n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\configuration\\configuration_envelope.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\configuration\\dvl_configuration.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\configuration\\shutdown_configuration.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\configuration\\sound_velocity_configuration.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcServices=\"None\"&gt;\n      &lt;/Protobuf&gt;\n      &lt;Protobuf Include=\"$(ProjectDir)..\\..\\..\\sonardyne-public\\idl\\services\\state_service.proto\" ProtoRoot=\"$(ProjectDir)..\\..\\..\\\" OutputDir=\"$(ProjectDir)\" GrpcOutputDir=\"$(ProjectDir)\" GrpcServices=\"Client\"&gt;\n      &lt;/Protobuf&gt;\n  &lt;/ItemGroup&gt;\n\n&lt;/Project&gt;\n</code></pre> example_code/cs/Program.cs<pre><code>//Copyright 2024 Sonardyne\n\n//Permission is hereby granted, free of charge, to any person obtaining a copy\n//of this software and associated documentation files (the \u201cSoftware\u201d), to deal\n//in the Software without restriction, including without limitation the rights\n//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//copies of the Software, and to permit persons to whom the Software is furnished\n//to do so, subject to the following conditions:\n\n//The above copyright notice and this permission notice shall be included in\n//all copies or substantial portions of the software.\n\n//THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n//WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n//CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nusing Grpc.Net.Client;\nusing Google.Protobuf.WellKnownTypes;\nusing Sonardyne.Api.Pub.Common;\nusing Sonardyne.Api.Pub.Configuration;\n\nnamespace Sonardyne.Api.Example\n{\ninternal class Program\n{\n// This example demonstrates how to connect to and get the current state of the instrument.\nstatic void Main(string[] args)\n{\n// NOTE: Change the IP Address and Port to match the instrument and its gRPC configuration.\nconst string address = \"http://127.0.0.1:1234\"; var channel = GrpcChannel.ForAddress(address); var client = new StateService.StateServiceClient(channel);\n\n// Get the version\nvar getVersionReply = client.GetVersion(new VersionRequest());\nConsole.WriteLine($\"\\nCalled GetVersion: v.{getVersionReply.Major}.{getVersionReply.Minor}\");\n\n// Get the current state of the instrument            \nvar getStateReply = client.GetState(new ConfigurationRequest());\n\nif (getStateReply?.Configuration.Count &gt; 0)\n{\nOutputState(getStateReply);\n}\n\n// Create a device configuration.\n// Create the envelope containing the new config.\n// Envelopes also contain 'timestamp' and 'result' fields which are populated in the instrument reply.\nvar configurationEnvelope = new ConfigurationEnvelope();\n\n// Create and add a reset config to perform a soft reset\nvar resetConfig = new ResetConfiguration();\n\nresetConfig.ResetType = new ResetType { Value = ResetType.Types.ResetTypeEnum.SoftReset };            configurationEnvelope.Configuration.Add(Any.Pack(resetConfig));\n\n// Create and add an aiding config to enable GNSS aiding and disable USBL aiding\nvar aidingConfig = new AidingConfiguration();\naidingConfig.EnableGnss = new AidingState { Value = AidingState.Types.AidingStateEnum.Enabled };\naidingConfig.EnableUsbl = new AidingState { Value = AidingState.Types.AidingStateEnum.Disabled };\nconfigurationEnvelope.Configuration.Add(Any.Pack(aidingConfig));\n\n// Create and add a sound velocity config to set the SV source to salinity-derived and set the SV salinity to an arbitrary value\nvar svConfig = new SoundVelocityConfiguration();\nsvConfig.SoundVelocityType = new SoundVelocityType { Value = SoundVelocityType.Types.SoundVelocityTypeEnum.External };\nsvConfig.ManualSalinityValuePartsPerThousand = new BoundedDouble { Value = 32.1 };\nconfigurationEnvelope.Configuration.Add(Any.Pack(svConfig));\n\n// Create and add a DVL config to set the update rate to an arbitrary choice\nvar dvlConfig = new DvlConfiguration();\ndvlConfig.UpdateRate = new DvlUpdateRate { Value = DvlUpdateRate.Types.DvlUpdateRateEnum.Fixed1Hz };\nconfigurationEnvelope.Configuration.Add(Any.Pack(dvlConfig));\n\n// Perform the SetState with the new envelope\nConsole.WriteLine($\"\\nSetting State...\");            var replyEnvelope = client.SetState(configurationEnvelope);\n\n// Returned envelope contains the current state of the updated settings, as well as a result field\nif (getStateReply?.Configuration.Count &gt; 0)\n{\nOutputState(replyEnvelope);\n}            }        static void OutputState(ConfigurationEnvelope configurationEnvelope)\n{\nforeach (var configuration in configurationEnvelope.Configuration)\n{\nif (configuration.Is(AidingConfiguration.Descriptor))\n{\nConsole.WriteLine($\"Aiding configuration rceived = {configuration.Unpack&lt;AidingConfiguration&gt;()}\");\n}                else if (configuration.Is(ResetConfiguration.Descriptor))\n{\nConsole.WriteLine($\"Reset configuration rceived = {configuration.Unpack&lt;ResetConfiguration&gt;()}\");\n}\nelse if (configuration.Is(SoundVelocityConfiguration.Descriptor))\n{\nConsole.WriteLine($\"Sound velocity configuration rceived = {configuration.Unpack&lt;SoundVelocityConfiguration&gt;()}\");\n}\nelse if (configuration.Is(DvlConfiguration.Descriptor))\n{\nConsole.WriteLine($\"DVL configuration rceived = {configuration.Unpack&lt;DvlConfiguration&gt;()}\");\n}                                else\n{\nConsole.WriteLine(\"Unknown configuration\");\n}\n}\n}\n}\n}\n</code></pre>"},{"location":"quick-start/#c-example_1","title":"C++ Example","text":"<p>As C++ has no universally accepted standard for managing project dependencies, gRPC supports several methods. The supplied C++ example code makes use of cmake, using <code>find_package</code>. This can only find software installed on your system, so gRPC will need to be installed from source using cmake. The installation location will then be referenced in cmake options to allow <code>find_package</code> to work.</p> <p>The .proto files can be built automatically using a custom command in cmake, as per the example code below. Alternatively, the source/header files can be generated from the .proto files manually with the following command:</p> <p><code>protoc --cpp_out=./proto-cpp-out/ --grpc_out=./proto-cpp-out/ --proto_path=protos/ protos/*.proto</code></p> <ul> <li><code>--cpp_out</code> specifies where to put the generated proto source/header files</li> <li><code>--grpc_out</code> specifies where to put the generated grpc source/header files</li> <li><code>--proto_path</code> specifies where the .proto files are located (used when proto files reference each other)</li> <li>The final parameter specifies the .proto file(s) to be compiled.</li> </ul> <p>protoc may require an extra parameter to specify the location of the gRPC C++ plugin, for example under Linux this could be: <code>--plugin=protoc-gen-grpc='which grpc_cpp_plugin'</code></p> <p>The example client code below made use of this guide.</p> Example C++ code example_code/cpp/CMakeLists.txt<pre><code>#Copyright 2023 Sonardyne\n\n#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n#documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\n#rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n#permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n#The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n#Software.\n\n#THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n#WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n#OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\ncmake_minimum_required(VERSION 3.26)\nproject(grpc_proto_example_cpp)\n\nset(CMAKE_CXX_STANDARD 17)\n\nfind_package(Protobuf CONFIG REQUIRED)\nmessage(\"Protobuf v\" ${Protobuf_VERSION})\n\nif(CMAKE_CROSSCOMPILING)\nfind_program(_PROTOBUF_PROTOC protoc)\nelse()\nset(_PROTOBUF_PROTOC $&lt;TARGET_FILE:protobuf::protoc&gt;)\nendif()\n\nfind_package(gRPC CONFIG REQUIRED)\nmessage(\"gRPC v\" ${gRPC_VERSION})\n\nif(CMAKE_CROSSCOMPILING)\nfind_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)\nelse()\nset(_GRPC_CPP_PLUGIN_EXECUTABLE $&lt;TARGET_FILE:gRPC::grpc_cpp_plugin&gt;)\nendif()\n\nadd_subdirectory(src)\n</code></pre> example_code/cpp/src/CMakeLists.txt<pre><code>#Copyright 2024 Sonardyne\n\n#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n#documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\n#rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n#permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n#The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n#Software.\n\n#THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n#WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n#COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n#OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nproject (son_grpc_proto)\n\nmessage(\"CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}\")\n\nfile(GLOB COMMON_PROTO        \"${CMAKE_CURRENT_SOURCE_DIR}/../../../../../sonardyne-public/idl/common/*.proto\")\nfile(GLOB CONFIGURATION_PROTO \"${CMAKE_CURRENT_SOURCE_DIR}/../../../../../sonardyne-public/idl/configuration/*.proto\")\nfile(GLOB SERVICES_PROTO      \"${CMAKE_CURRENT_SOURCE_DIR}/../../../../../sonardyne-public/idl/services/*.proto\")\n\nadd_library(${PROJECT_NAME} OBJECT ${PROTO_SRC_COMMON_FILES}\n${PROTO_SRC_CONFIGURATION}\n${PROTO_SRC_SERVICE})\n\ntarget_include_directories(${PROJECT_NAME} PUBLIC \"${CMAKE_BINARY_DIR}/sonardyne-public/\")\ntarget_include_directories(${PROJECT_NAME} PUBLIC \"${CMAKE_BINARY_DIR}/sonardyne-public/idl/common/\")\ntarget_include_directories(${PROJECT_NAME} PUBLIC \"${CMAKE_BINARY_DIR}/sonardyne-public/idl/configuration/\")\ntarget_include_directories(${PROJECT_NAME} PUBLIC \"${CMAKE_BINARY_DIR}/sonardyne-public/idl/services/\")\ntarget_include_directories(${PROJECT_NAME} PUBLIC \"$&lt;BUILD_INTERFACE:${CMAKE_BINARY_DIR}&gt;\")\n\n\ntarget_sources(${PROJECT_NAME} PUBLIC ${COMMON_PROTO}\n${CONFIGURATION_PROTO}\n${SERVICES_PROTO})\n\ntarget_link_libraries(${PROJECT_NAME} PUBLIC protobuf::libprotobuf gRPC::grpc++)\n\n#Generate the protobuf files\nprotobuf_generate(TARGET ${PROJECT_NAME} IMPORT_DIRS ../../../../../\nPROTOC_OUT_DIR\n${CMAKE_BINARY_DIR}\nLANGUAGE cpp)\n\n#Generate the gRPC files\nprotobuf_generate(TARGET ${PROJECT_NAME} LANGUAGE grpc\nGENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc PLUGIN \"protoc-gen-grpc=\\$&lt;TARGET_FILE:gRPC::grpc_cpp_plugin&gt;\"\nIMPORT_DIRS ../../../../../\nPROTOC_OUT_DIR ${CMAKE_BINARY_DIR})\n\nadd_executable(son_grpc_client main.cpp)\ntarget_link_libraries(son_grpc_client ${PROJECT_NAME})\n</code></pre> example_code/cpp/src/main.cpp<pre><code>//Copyright 2023 Sonardyne\n\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n//documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\n//rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n//permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n//Software.\n\n//THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n//WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n//COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#include &lt;iostream&gt;\n\n#include &lt;grpc/grpc.h&gt;\n#include &lt;grpcpp/channel.h&gt;\n#include &lt;grpcpp/client_context.h&gt;\n#include &lt;grpcpp/create_channel.h&gt;\n#include &lt;grpcpp/security/credentials.h&gt;\n#include &lt;google/protobuf/util/json_util.h&gt;\n\n#include &lt;state_service.grpc.pb.h&gt;\n#include &lt;aiding_configuration.pb.h&gt;\n\nusing namespace sonardyne::api;\nusing namespace sonardyne::api::pub::common;\nusing namespace sonardyne::api::pub::configuration;\n\nclass SonGrpcClient {\npublic:\nSonGrpcClient(std::string target_ipport) : _channel(grpc::CreateChannel(target_ipport, grpc::InsecureChannelCredentials())),\n_stub(StateService::NewStub(_channel)) {\n\n}\n\nvoid PrintVersion() {\nstd::cout &lt;&lt; \"Calling GetVersion...\" &lt;&lt; std::endl;\n\nVersionRequest version_request;\nVersionResponse version_response;\ngrpc::ClientContext client_context;\ngrpc::Status get_version_status = _stub-&gt;GetVersion(&amp;client_context, version_request, &amp;version_response);\nif (get_version_status.ok()) {\nstd::cout &lt;&lt; \"Called GetVersion: V\" &lt;&lt; version_response.major() &lt;&lt; \".\" &lt;&lt; version_response.minor() &lt;&lt; std::endl;\n}\nelse {\nstd::cout &lt;&lt; \"GetVersion failed.\" &lt;&lt; std::endl;\n}\n}\n\nvoid PrintAllStatesAsJSON(){\nConfigurationRequest config_request;\nconfig_request.set_requestor(_requestor_name);\nConfigurationEnvelope config_envelope;\ngrpc::ClientContext client_context;\nstd::cout &lt;&lt; \"Calling GetState...\" &lt;&lt; std::endl;\ngrpc::Status get_state_status = _stub-&gt;GetState(&amp;client_context, config_request, &amp;config_envelope);\n\nif (get_state_status.ok()) {\nfor(const auto&amp; configuration : config_envelope.configuration()) {\nstd::string json_string;\nauto status =google::protobuf::json::MessageToJsonString\n(configuration, &amp;json_string);\nif(status.ok()) {\nstd::cout &lt;&lt; \"Configuration: \" &lt;&lt; json_string &lt;&lt; std::endl;\n}\n}\n}\nelse {\nstd::cout &lt;&lt; \"GetState Failed.\" &lt;&lt; std::endl;\n}\n}\nvoid PrintAidingStates() {\nConfigurationRequest config_request;\nconfig_request.set_requestor(_requestor_name);\nConfigurationEnvelope config_envelope;\ngrpc::ClientContext client_context;\nstd::cout &lt;&lt; \"Calling GetState...\" &lt;&lt; std::endl;\ngrpc::Status get_state_status = _stub-&gt;GetState(&amp;client_context, config_request, &amp;config_envelope);\n\nif (get_state_status.ok()) {\nfor(const auto&amp; configuration : config_envelope.configuration()) {\nstd::cout &lt;&lt; \"Configuration: \" &lt;&lt; configuration.DebugString() &lt;&lt; std::endl;\n\nif(configuration.Is&lt;AidingConfiguration&gt;()){\nAidingConfiguration aiding_config;\nconfiguration.UnpackTo(&amp;aiding_config);\n\nstd::cout &lt;&lt; \"Called GetState:\" &lt;&lt; std::endl;\nPrintAnAidingState(\"GNSS\", aiding_config.enable_gnss().value());\nPrintAnAidingState(\"XPOS\", aiding_config.enable_xpos().value());\nPrintAnAidingState(\"USBL\", aiding_config.enable_xpos().value());\n}\n}\n}\nelse {\nstd::cout &lt;&lt; \"GetState Failed.\" &lt;&lt; std::endl;\n}\n}\n\ngrpc::Status SetState(ConfigurationEnvelope request_config_envelope) {\nConfigurationEnvelope response_config_envelope;\ngrpc::ClientContext client_context;\nstd::cout &lt;&lt; \"Calling SetState...\" &lt;&lt; std::endl;\nreturn _stub-&gt;SetState(&amp;client_context, request_config_envelope, &amp;response_config_envelope);\n}\n\nprivate:\nstd::shared_ptr&lt;grpc::Channel&gt; _channel;\nstd::unique_ptr&lt;StateService::Stub&gt; _stub;\nstd::string _requestor_name = \"C++ Client\";\n\nvoid PrintAnAidingState(std::string aiding_source, AidingState_AidingStateEnum aiding_state) {\nif (aiding_state == AidingState_AidingStateEnum_ENABLED) {\nstd::cout &lt;&lt; aiding_source &lt;&lt; \" Aiding is enabled.\" &lt;&lt; std::endl;\n}\nelse if (aiding_state == AidingState_AidingStateEnum_DISABLED) {\nstd::cout &lt;&lt; aiding_source &lt;&lt; \" Aiding is disabled.\" &lt;&lt; std::endl;\n}\nelse {\nstd::cout &lt;&lt; aiding_source &lt;&lt; \" Aiding state unknown.\" &lt;&lt; std::endl;\n}\n}\n};\n\nint main (int argc, char *argv[]) {\n// NOTE: Change the IP Address and Port to match the Instrument and its gRPC configuration.\nSonGrpcClient client(\"192.168.179.11:7777\");\nclient.PrintVersion();\nclient.PrintAidingStates();\n\nConfigurationEnvelope request_config_envelope;\nAidingConfiguration aiding_config;\naiding_config.mutable_enable_gnss()-&gt;set_value(AidingState_AidingStateEnum_ENABLED);\naiding_config.mutable_enable_xpos()-&gt;set_value(AidingState_AidingStateEnum_ENABLED);\naiding_config.mutable_enable_usbl()-&gt;set_value(AidingState_AidingStateEnum_ENABLED);\nrequest_config_envelope.add_configuration()-&gt;PackFrom(aiding_config);\n\nclient.SetState(request_config_envelope);\n\nclient.PrintAidingStates();\nclient.PrintAllStatesAsJSON();\n\nreturn 0;\n}\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#hnav","title":"HNAV","text":"<p>The Hybrid Navigation (HNAV) message includes all information required for vehicle guidance, control and navigation. All fields will be initialised to 0. once a field has been assigned a value it will retain that value until a further update is available. The status bits should be used to determine when data is old/stale. The HNAV requires the Simple binary protocol to successfully decode the message; see Appendix G3 Simple Binary Protocol.  All data is transmitted LSB first.</p> <p>A C++ HNAV Decoder is available on Sonardyne's Github</p>"},{"location":"reference/#simple-binary-protocol","title":"Simple binary protocol","text":"Data field LSB/(fixed value) Range Data type Size(Bytes) Notes Header (0xAA 0xBF) 0 to 255 UINT8 2 Header to denote the start of the packet Version (0) 0 to 255 UINT8 1 Version of protocol ID (0) 0 to 65535 UINT16 2 Message ID (HNAV = 0) see Note 1 Size - 0 - 4096 - 2 Size of data field in bytes, see note 2 Counter - 0 to 255 - 1 Counter per message, increments before rolling over to 0. Allows detection of out of order receipt. Spare - - - 2 Not Used Payload - - - - Message data (e.g. HNAV) Checksum - - UINT16 2 CRC-X.25: 0x1021. Covers all bytes before and including data bytes. Notes <p>Each Output message has its own Message ID, the message ID of HNAV is 0</p> <p>Each Output message will have a fixed size, the HNAV is 55 Bytes</p>"},{"location":"reference/#hnav-definition","title":"HNAV definition","text":"Data field LSB/(fixed value) Range Data type Size(Bytes) Notes Version 0 0 to 255 UINT8 1 Version of message Time of Validity (UTC) 10-6 seconds - UINT64 8 Latitude 2-31\u00d790 deg +/- 90 deg INT32 4 Not populated in Guidance Longitude 2-31\u00d7180 deg +/- 180 deg INT32 4 Not populated in Guidance Depth 1mm +/- 12,000m INT32 4 Depth at vehicle CRP Altitude 0.01m 0 to 600m UINT16 2 Altitude is referenced from SPRINT-Nav Mini\u2019s measurement point to the seabed (not compensated for CRP measurements). Roll 0.0055 deg +/- 180 deg INT16 2 Pitch 0.0055 deg +/- 90 deg INT16 2 Heading 0.0055 deg 0 to 360 deg UINT16 2 Fwd Velocity 1mm/s +/-30m/s INT16 2 Stbd Velocity 1mm/s +/-30m/s INT16 2 Dwn Velocity 1mm/s +/-30m/s INT16 2 Fwd Ang Rate 0.011 deg/s +/-300deg/s INT16 2 Stbd Ang Rate 0.011 deg/s +/-300deg/s INT16 2 Dwn Ang Rate 0.011 deg/s +/-300deg/s INT16 2 Sound Velocity 0.03m/s 1375 to 1900 m/s UINT16 2 Temperature 0.01\u00b0C +/- 100\u00b0C INT16 2 Position Quality - - FLOAT32 4 Not populated in Guidance 2D Quality (CEP50) Heading Quality 0.005\u00b0 0 to 180 deg UINT16 2 Velocity Quality 1mm/s 0 to 30 m/s UINT16 2 2D Quality Status - - - - See Status table"},{"location":"reference/#hnav-bit-fields","title":"HNAV Bit Fields","text":"Status Bit Field name Notes/Bit Set 0 System Error No error reported by system = 0 System Error reported = 1 1 Mode Alignment mode = 0 Hybrid mode = 1 2 Heading valid = 0 Invalid = 1 3 Altitude valid = 0 Invalid = 1 4 Velocity valid = 0 Invalid = 1 5 Depth valid = 0 Invalid = 1 6 Sound Velocity valid = 0 Invalid = 1 7 Temperature valid = 0 Invalid = 1 8 Spare Not Used 9 Position valid = 0 Invalid = 1 10 UTC Time valid = 0 Invalid = 1 11 Spare Not Used 12 Spare Not Used 13 Spare Not Used 14 Spare Not Used 15 Spare Not Used"},{"location":"technology-explainer/","title":"Technology explainer","text":""},{"location":"technology-explainer/#grpc-and-protocol-buffers","title":"gRPC and Protocol Buffers","text":""},{"location":"technology-explainer/#what-is-grpc","title":"What is gRPC?","text":"<p>gRPC (a self-containing acronym: 'gRPC Remote Procedure Calls') is an open source universal RPC framework licensed under Apache 2.0. It allows clients and servers to be generated in a variety of supported languages and run on a variety of platforms. Complexity from communicating between different languages or platforms is handled for the developer by gRPC.</p>"},{"location":"technology-explainer/#what-are-protocol-buffers","title":"What are Protocol Buffers?","text":"<p>Protocol Buffers (or Protobuf) are a language-neutral, platform-neutral extensible mechanism for serialising structured data. They allow data to be stored in an efficient way when serialised, while still being easy to use for the programmer and allowing backwards-compatible updates to the interface. They are used by gRPC as the Interface Definition Language (IDL) and serialisation toolset.</p>"},{"location":"technology-explainer/#building-grpc-for-different-languages","title":"Building gRPC for different languages","text":"<p>gRPC + Protobuf can be used with a variety of platforms. In general, the steps are:</p> <ul> <li>Install dependencies (protoc etc)</li> <li>Use protoc to generate code from the .proto files</li> <li>Include the generated code in clients/servers</li> </ul>"},{"location":"technology-explainer/#grpc-advantages-and-disadvantages","title":"gRPC advantages and disadvantages","text":"<ul> <li><code>+</code> gRPC is high-performance and produces compact binary messages</li> <li><code>+</code> It can generate the necessary code for multiple platforms/languages</li> <li><code>+</code> It can use TLS security if required</li> <li><code>-</code> The binary format of Protobuf is not human-readable</li> </ul>"},{"location":"technology-explainer/#json","title":"JSON","text":""},{"location":"technology-explainer/#what-is-the-json-interface","title":"What is the JSON interface?","text":"<p>The JSON interface is a layer in front of the gRPC interface, which allows a user to send a JSON string representation of the Protocol Buffer. The instrument will receive this string and convert it, using the same backend code as the gRPC interface (this ensures that both interfaces are guaranteed to behave in the same way).</p>"},{"location":"technology-explainer/#json-advantages-and-disadvantages","title":"JSON advantages and disadvantages","text":"<ul> <li><code>+</code> JSON is human-readable and may be a more user-friendly way of performing comms with the instrument.</li> <li><code>+</code> It can be used for sending commands by hand for testing, without use of extra software tools.</li> <li><code>-</code> Use of JSON strings will make messages larger, and will add a parsing overhead on the instrument.</li> </ul>"}]}