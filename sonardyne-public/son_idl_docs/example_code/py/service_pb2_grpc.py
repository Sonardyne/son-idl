# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import configuration_pb2 as configuration__pb2
import version_pb2 as version__pb2


class SonardyneServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVersion = channel.unary_unary(
                '/sonardyne.api.SonardyneService/GetVersion',
                request_serializer=version__pb2.VersionRequest.SerializeToString,
                response_deserializer=version__pb2.VersionResponse.FromString,
                )
        self.SetState = channel.unary_unary(
                '/sonardyne.api.SonardyneService/SetState',
                request_serializer=configuration__pb2.ConfigurationEnvelope.SerializeToString,
                response_deserializer=configuration__pb2.ConfigurationEnvelope.FromString,
                )
        self.GetState = channel.unary_unary(
                '/sonardyne.api.SonardyneService/GetState',
                request_serializer=configuration__pb2.ConfigurationRequest.SerializeToString,
                response_deserializer=configuration__pb2.ConfigurationEnvelope.FromString,
                )
        self.StateStream = channel.unary_stream(
                '/sonardyne.api.SonardyneService/StateStream',
                request_serializer=configuration__pb2.ConfigurationRequest.SerializeToString,
                response_deserializer=configuration__pb2.ConfigurationEnvelope.FromString,
                )


class SonardyneServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetVersion(self, request, context):
        """Gets the api protocol version
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetState(self, request, context):
        """Sets instrument configuration.  Returns the updated configuration, result, and timestamp
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """Gets instrument configuration.  The 'ConfigurationRequest' contains required instrument specific configuration type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StateStream(self, request, context):
        """A stream which publishes all state changes on the instrument.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SonardyneServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersion,
                    request_deserializer=version__pb2.VersionRequest.FromString,
                    response_serializer=version__pb2.VersionResponse.SerializeToString,
            ),
            'SetState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetState,
                    request_deserializer=configuration__pb2.ConfigurationEnvelope.FromString,
                    response_serializer=configuration__pb2.ConfigurationEnvelope.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=configuration__pb2.ConfigurationRequest.FromString,
                    response_serializer=configuration__pb2.ConfigurationEnvelope.SerializeToString,
            ),
            'StateStream': grpc.unary_stream_rpc_method_handler(
                    servicer.StateStream,
                    request_deserializer=configuration__pb2.ConfigurationRequest.FromString,
                    response_serializer=configuration__pb2.ConfigurationEnvelope.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sonardyne.api.SonardyneService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SonardyneService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sonardyne.api.SonardyneService/GetVersion',
            version__pb2.VersionRequest.SerializeToString,
            version__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sonardyne.api.SonardyneService/SetState',
            configuration__pb2.ConfigurationEnvelope.SerializeToString,
            configuration__pb2.ConfigurationEnvelope.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sonardyne.api.SonardyneService/GetState',
            configuration__pb2.ConfigurationRequest.SerializeToString,
            configuration__pb2.ConfigurationEnvelope.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StateStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sonardyne.api.SonardyneService/StateStream',
            configuration__pb2.ConfigurationRequest.SerializeToString,
            configuration__pb2.ConfigurationEnvelope.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
