//Copyright 2023 Sonardyne

//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
//documentation files (the “Software”), to deal in the Software without restriction, including without limitation the
//rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
//permit persons to whom the Software is furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
//Software.

//THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

syntax = "proto3";

option csharp_namespace = "SonardyneApi";

import "result.proto";
import "timestamp.proto";
import "uid.proto";

package sonardyne.api;

// A container of an instrument configuration and timestamp
message ConfigurationEnvelope{
  Timestamp timestamp = 1;
  Result result = 2; // Populated by instrument when replying to a SetState
  Configuration configuration = 3;
}

message ConfigurationRequest{
  Timestamp timestamp = 1;
  string requestor = 2; // Optional user-definable field
}

message Configuration{ // Each type of configuration is repeated to allow multiple recipients per message, e.g. resetting multiple algorithms on an instrument
  repeated ResetConfiguration reset_configurations = 100; // Collection of reset configurations
  repeated AidingConfiguration aiding_configurations = 101; // Collection of aiding configurations
  repeated SoundVelocityConfiguration sound_velocity_configurations = 102; // Collection of Sound Velocity configurations
  repeated DopplerVelocityLogConfiguration doppler_velocity_configurations = 103; // Collection of Doppler Velocity configurations
}

// Set type of reset to execute
message ResetConfiguration{
  enum RESET_TYPE{
    RESET_TYPE_UNSPECIFIED = 0; // Default value if field is not populated
    SOFT_RESET             = 1; // See instrument manual for description
    HARD_RESET             = 2; // See instrument manual for description
  }

  Uid id = 1;                // Used to identify recipient instrument/module
  Result result = 2;         // Populated by instrument when replying to a SetState
  RESET_TYPE reset_type = 3; // Indicates the type of reset required
}

// Position aiding configuration, defines which position input(s) to use for aiding
message AidingConfiguration{
  enum AIDING_STATE{
    AIDING_STATE_UNSPECIFIED = 0; // Default value if field is not populated
    ENABLED                  = 1;
    DISABLED                 = 2;
  }

  Uid id = 1;                   // Used to identify recipient instrument/module
  Result result = 2;            // Populated by instrument when replying to a SetState
  AIDING_STATE enable_gnss = 3; // Used to turn GNSS aiding on or off
  AIDING_STATE enable_xpos = 4; // Used to turn XPOS aiding on or off
  AIDING_STATE enable_usbl = 5; // Used to turn USBL aiding on or off
}

// Sound Velocity configuration which controls the type of trigger to use
message SoundVelocityConfiguration{
  enum SOUND_VELOCITY{
    SOUND_VELOCITY_UNSPECIFIED = 0; // Default value if field is not populated
    EXTERNAL                   = 1; // Use external - N.B. The port must be specified in the webUI
    INTERNAL_SALINITY          = 2; // Use internal (derived from salinity)
    INTERNAL_MANUAL            = 3; // Use manually defined value
  }

  Uid id = 1;                             // Used to identify recipient instrument/module
  Result result = 2;                      // Populated by instrument when replying to a SetState
  SOUND_VELOCITY sound_velocity_type = 3; // Define the Sound Velocity source
  double manual_salinity_value = 4;       // Used if Sound Velocity type is INTERNAL_SALINITY
  double manual_velocity_value = 5;       // Used if Sound Velocity type is INTERNAL_MANUAL
}

// Doppler Velocity Log configuration which controls the update rate
message DopplerVelocityLogConfiguration{
  enum UPDATE_RATE{
    UPDATE_RATE_UNSPECIFIED = 0; // Default value if field is not populated
    TRIGGER_RISING          = 1; // Use external trigger (rising edge)
    TRIGGER_FALLING         = 2; // Use external trigger (falling edge)
    MAX_RATE                = 3; // Use max supported update rate
    FIXED_1HZ               = 4; // Use fixed 1Hz rate
    FIXED_2HZ               = 5; // Use fixed 2Hz rate
    FIXED_5HZ               = 6; // Use fixed 5Hz rate
    FIXED_10HZ              = 7; // Use fixed 10Hz rate
  }

  Uid id = 1;                  // Used to identify recipient instrument/module
  Result result = 2;           // Populated by instrument when replying to a SetState
  UPDATE_RATE update_rate = 3; // Specifies the update rate in Hz
}
